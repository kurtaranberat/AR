import React, { useState } from 'react';
import { View, Text, StyleSheet, ScrollView, TouchableOpacity, TextInput } from 'react-native';

const SettingsScreen = () => {
  const [score, setScore] = useState(0);
  const [showAnswers, setShowAnswers] = useState(false);
  const [answers, setAnswers] = useState({
    question1: '',
    question2: '',
  });

  const readingText = `
    Bir zamanlar k√º√ß√ºk bir kasabada ya≈üayan meraklƒ± bir √ßocuk vardƒ±. Her g√ºn okula giderken yol √ºzerindeki aƒüa√ßlarƒ±, ku≈ülarƒ± ve b√∂cekleri izlerdi. Bir g√ºn, her zamankinden farklƒ± bir ≈üey g√∂rd√º: parlak mavi kanatlƒ±, daha √∂nce hi√ß g√∂rmediƒüi bir kelebek. Kelebek, √ßi√ßekten √ßi√ßeƒüe dans eder gibi u√ßuyordu.

    √áocuk kelebeƒüi takip etmeye ba≈üladƒ± ve onu izlerken doƒüanƒ±n ne kadar g√ºzel ve ≈üa≈üƒ±rtƒ±cƒ± olduƒüunu fark etti. O g√ºnden sonra, her sabah biraz daha erken kalkmaya ve okul yolunda yeni ≈üeyler ke≈üfetmeye ba≈üladƒ±. Bazen yeni a√ßmƒ±≈ü bir √ßi√ßek, bazen yuvadan yeni √ßƒ±kmƒ±≈ü bir ku≈ü yavrusu g√∂r√ºyordu.

    Bu k√º√ß√ºk ke≈üifler, √ßocuƒüun hayata bakƒ±≈ü a√ßƒ±sƒ±nƒ± deƒüi≈ütirdi. Artƒ±k sadece gideceƒüi yere odaklanmak yerine, yolculuƒüun kendisinden keyif almayƒ± √∂ƒürendi. Ve en √∂nemlisi, her g√ºn√ºn yeni bir ke≈üif fƒ±rsatƒ± olduƒüunu anladƒ±.
  `;

  const questions = [
    {
      id: 1,
      question: '√áocuk okul yolunda ne g√∂rd√ºƒü√ºnde hikaye deƒüi≈ümeye ba≈üladƒ±?',
      correctAnswer: 'Mavi kanatlƒ± bir kelebek',
    },
    {
      id: 2,
      question: 'Hikayenin sonunda √ßocuk hangi √∂nemli dersi √∂ƒürendi?',
      correctAnswer: 'Her g√ºn√ºn yeni bir ke≈üif fƒ±rsatƒ± olduƒüunu',
    },
  ];

  const checkAnswers = () => {
    let newScore = 0;
    if (answers.question1.toLowerCase().includes('mavi') && 
        answers.question1.toLowerCase().includes('kelebek')) {
      newScore += 1;
    }
    if (answers.question2.toLowerCase().includes('ke≈üif') || 
        answers.question2.toLowerCase().includes('fƒ±rsat')) {
      newScore += 1;
    }
    setScore(newScore);
    setShowAnswers(true);
  };

  const resetQuiz = () => {
    setAnswers({ question1: '', question2: '' });
    setScore(0);
    setShowAnswers(false);
  };

  return (
    <ScrollView style={styles.container}>
      <View style={styles.content}>
        {/* Okuma Metni Kartƒ± */}
        <View style={styles.card}>
          <Text style={styles.cardTitle}>Okuma Par√ßasƒ±</Text>
          <Text style={styles.readingText}>{readingText}</Text>
        </View>

        {/* Sorular Kartƒ± */}
        <View style={styles.card}>
          <Text style={styles.cardTitle}>Sorular</Text>
          
          {questions.map((q) => (
            <View key={q.id} style={styles.questionContainer}>
              <Text style={styles.question}>{q.id}. {q.question}</Text>
              <TextInput
                style={styles.input}
                placeholder="Cevabƒ±nƒ±zƒ± buraya yazƒ±n..."
                value={answers[`question${q.id}`]}
                onChangeText={(text) => 
                  setAnswers(prev => ({...prev, [`question${q.id}`]: text}))
                }
                multiline
              />
              {showAnswers && (
                <Text style={styles.answerText}>
                  Doƒüru Cevap: {q.correctAnswer}
                </Text>
              )}
            </View>
          ))}

          {/* Butonlar */}
          <View style={styles.buttonContainer}>
            <TouchableOpacity 
              style={[styles.button, !showAnswers && styles.primaryButton]} 
              onPress={showAnswers ? resetQuiz : checkAnswers}
            >
              <Text style={styles.buttonText}>
                {showAnswers ? 'Yeniden Ba≈üla' : 'Cevaplarƒ± Kontrol Et'}
              </Text>
            </TouchableOpacity>
          </View>

          {/* Skor G√∂sterimi */}
          {showAnswers && (
            <View style={styles.scoreContainer}>
              <Text style={styles.scoreText}>
                Skorunuz: {score}/{questions.length}
              </Text>
              <Text style={styles.scoreMessage}>
                {score === questions.length 
                  ? 'üéâ M√ºkemmel! T√ºm sorularƒ± doƒüru cevapladƒ±nƒ±z!'
                  : score > 0 
                    ? 'üëç ƒ∞yi gidiyorsunuz! Tekrar deneyebilirsiniz.'
                    : 'üí™ Tekrar denemeye ne dersiniz?'}
              </Text>
            </View>
          )}
        </View>
      </View>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F5F7FA',
  },
  content: {
    padding: 16,
  },
  card: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 16,
    marginBottom: 16,
    elevation: 2,
  },
  cardTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#2D3748',
    marginBottom: 12,
  },
  readingText: {
    fontSize: 16,
    lineHeight: 24,
    color: '#4A5568',
  },
  questionContainer: {
    marginBottom: 20,
  },
  question: {
    fontSize: 16,
    fontWeight: '600',
    color: '#2D3748',
    marginBottom: 8,
  },
  input: {
    borderWidth: 1,
    borderColor: '#E2E8F0',
    borderRadius: 8,
    padding: 12,
    fontSize: 16,
    color: '#4A5568',
    backgroundColor: '#F8FAFC',
    minHeight: 50,
  },
  buttonContainer: {
    marginTop: 20,
  },
  button: {
    padding: 16,
    borderRadius: 8,
    alignItems: 'center',
    backgroundColor: '#718096',
  },
  primaryButton: {
    backgroundColor: '#4299E1',
  },
  buttonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
  scoreContainer: {
    marginTop: 20,
    padding: 16,
    backgroundColor: '#EBF8FF',
    borderRadius: 8,
  },
  scoreText: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#2B6CB0',
    textAlign: 'center',
  },
  scoreMessage: {
    marginTop: 8,
    fontSize: 16,
    color: '#2C5282',
    textAlign: 'center',
  },
  answerText: {
    marginTop: 8,
    fontSize: 14,
    color: '#48BB78',
    fontStyle: 'italic',
  },
});

export default SettingsScreen;
